import Vote from "@/components/Vote";
import Head from "next/head";
import { getServerSession } from "next-auth/next";
import { authOptions } from "./api/auth/[...nextauth]";
import type { GetServerSidePropsContext } from "next";
import { useSession } from "next-auth/react";
import Link from "next/link";
import { useEffect, useState } from "react";

export default function Home() {
  const { data: session, status } = useSession();

  const [motion, setMotion] = useState(0);

  useEffect(() => {
    console.log(session?.userId);
  }, [session]);

  useEffect(() => {
    (DeviceMotionEvent as any)
      .requestPermission()
      .then((response: any) => {
        if (response == "granted") {
          window.addEventListener("devicemotion", (e: any) => {
            setMotion(e.accelerationIncludingGravity.x);
          });
        }
      })
      .catch(console.error);
  }, [motion]);

  const handleRequestMotion = async () => {
    if (typeof (DeviceMotionEvent as any).requestPermission === "function") {
      (DeviceMotionEvent as any)
        .requestPermission()
        .then((permissionState: any) => {
          if (permissionState === "granted") {
            window.addEventListener("devicemotion", (e: any) => {
              setMotion(e.accelerationIncludingGravity.x);
            });
          }
        })
        .catch(console.error);
    } else {
      // handle regular non iOS 13+ devices
      console.log("asds");
    }
  };

  if (!session) {
    return (
      <>
        <Head>
          <title>Create Next App</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <main>
          <Link href="/api/auth/signin">
            <button>sign in</button>
          </Link>
          status: {status}
          motion: {motion}
          <button onClick={handleRequestMotion}>Request Motion</button>
        </main>
      </>
    );
  } else {
    return (
      <>
        <Head>
          <title>Create Next App</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <main>
          {session?.userId && <Vote userId={session?.userId} />}
          status: {status}
          motion: {motion}
        </main>
      </>
    );
  }
}

// Export the `session` prop to use sessions with Server Side Rendering
export async function getServerSideProps(context: GetServerSidePropsContext) {
  return {
    props: {
      session: await getServerSession(context.req, context.res, authOptions),
    },
  };
}
function then(arg0: (response: any) => void) {
  throw new Error("Function not implemented.");
}
